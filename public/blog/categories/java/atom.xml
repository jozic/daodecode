<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Dao De Code]]></title>
  <link href="http://daodecode.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://daodecode.com/"/>
  <updated>2014-10-27T17:20:31-04:00</updated>
  <id>http://daodecode.com/</id>
  <author>
    <name><![CDATA[Eugene Platonov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Call Scala curried functions from Java]]></title>
    <link href="http://daodecode.com/blog/2014/04/29/call-scala-curried-functions-from-java/"/>
    <updated>2014-04-29T13:40:00-04:00</updated>
    <id>http://daodecode.com/blog/2014/04/29/call-scala-curried-functions-from-java</id>
    <content type="html"><![CDATA[<p>For some reason I thought scala curried functions is one of the features you will have troubles using from Java. But it happens that you can perfectly call a curried Scala function</p>

<p>``` scala
class A {</p>

<pre><code>def curried(i: Int)(s: String) = i + s.toInt
</code></pre>

<p>}
```
from Java</p>

<p>``` java
new A().curried(5, "7")</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sbt Plugins: No Default Package Please]]></title>
    <link href="http://daodecode.com/blog/2014/02/18/sbt-plugins-no-default-package-please/"/>
    <updated>2014-02-18T16:46:00-05:00</updated>
    <id>http://daodecode.com/blog/2014/02/18/sbt-plugins-no-default-package-please</id>
    <content type="html"><![CDATA[<p>Usually people don't put sbt builds in a package (I'm talking about scala files here), especially for simple and small projects.
And they easily can use all the sbt plugins. <br/>
But there are other users who have bigger and more complex builds.
So they put their builds in packages and then they discover they can use only plugins which themselves defined in packages. Bummer!</p>

<p>Scala, as well as Java, does allow classes in <a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-7.html#jls-7.4.2">default or unnamed</a> package, but those classes can be accessed within default package only.
There is literally <a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-7.html#jls-7.5">no way</a> to import a class from default package.
Thus when someone creates an sbt plugin and puts it in default package, (s)he makes owners of packaged builds
 feel almost physical pain when they try to use the plugin.</p>

<p>So if you are an author of an sbt plugin, please consider to put it into a package. Doing otherwise violates
<a href="https://github.com/sbt/sbt/blob/0.13/src/sphinx/Extending/Plugins-Best-Practices.rst#dont-use-default-package">best practices</a>
 and makes God to kill a kitten.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Override a list property for Typesafe Config]]></title>
    <link href="http://daodecode.com/blog/2014/02/04/override-a-list-property-for-typesafe-config/"/>
    <updated>2014-02-04T19:39:00-05:00</updated>
    <id>http://daodecode.com/blog/2014/02/04/override-a-list-property-for-typesafe-config</id>
    <content type="html"><![CDATA[<p>Today I naively was trying to override a list property for a unit test with the following code
<code>scala
System.setProperty("list.property", """[ "val1", "val2"]""")
</code></p>

<p>The tested code is reading the list property using <a href="https://github.com/typesafehub/config">typesafe config</a> library</p>

<p><code>scala
val listProperty = config.getListString.asScala.toSet
</code></p>

<p>That was throwing
<code>com.typesafe.config.ConfigException$WrongType: system properties: list.property has type STRING rather than LIST</code></p>

<p>so I've googled a <a href="https://github.com/typesafehub/config/issues/69">solution</a> for overriding list properties from
command line, which is same for overriding in code</p>

<p>Here is how it looks now</p>

<p><code>scala
System.setProperty("list.property.0", "val1")
System.setProperty("list.property.1", "val2")
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CASTGC Cookie and HttpOnly Flag]]></title>
    <link href="http://daodecode.com/blog/2013/03/25/castgc-cookie-and-httponly-flag/"/>
    <updated>2013-03-25T10:56:00-04:00</updated>
    <id>http://daodecode.com/blog/2013/03/25/castgc-cookie-and-httponly-flag</id>
    <content type="html"><![CDATA[<p>Let's assume you employ <a href="http://www.jasig.org/cas">CAS</a> to be your single sign-on solution. Upon receiving correct credentials from the user CAS generates CASTGC cookie,
   which is marked with <a href="http://en.wikipedia.org/wiki/HTTP_cookie#Secure_and_HttpOnly">Secured</a> flag. And assume you want to add <a href="http://en.wikipedia.org/wiki/HTTP_cookie#Secure_and_HttpOnly">HttpOnly</a>
   flag to the cookie, to prevent accessing it <code>via non-HTTP methods</code>.
   CAS of version 3.5.0 depends on <a href="http://download.oracle.com/otndocs/jcp/servlet-2.5-mrel-eval-oth-JSpec/">servlet-api 2.5</a> and fancy <a href="http://docs.oracle.com/javaee/6/api/javax/servlet/http/Cookie.html#setHttpOnly(boolean)">setHttpOnly</a>
   method has been added in version 3.0 of the servlet-api. So how do we deal with it?</p>

<p>Assuming you run your CAS in a servlet container based on <a href="http://download.oracle.com/otndocs/jcp/servlet-3.0-fr-oth-JSpec/">servlet 3.0 specification</a>
 (e.g. <a href="http://eclipse.org/jetty/">Jetty 8</a> or <a href="http://tomcat.apache.org/download-70.cgi">Tomcat 7</a>) and use <a href="http://maven.apache.org/">maven</a> as your build tool you can do the following to make it happen:</p>

<ol>
<li> exclude old (2.5 and lower) servlet-api jars from dependencies. For example

```xml
    <dependency>
        <groupId>org.jasig.cas</groupId>
        <artifactId>cas-server-integration-restlet</artifactId>
        <version>${casVersion}</version>
        <exclusions>
            <exclusion>
                <groupId>javax.servlet</groupId>
                <artifactId>servlet-api</artifactId>
            </exclusion>
        </exclusions>
    </dependency>
```
</li>
<li> include new servlet-api jar (notice that artifact id has been changed)

``` xml
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>javax.servlet-api</artifactId>
        <version>3.0.1</version>
        <scope>provided</scope>
    </dependency>
```
</li>
<li> create your own version of <a href="https://github.com/Jasig/cas/blob/master/cas-server-webapp/src/main/java/org/jasig/cas/web/support/CookieRetrievingCookieGenerator.java">CookieRetrievingCookieGenerator</a>
which supports HttpOnly flag. You want to extend this class because CAS relies on it internally.

``` java
    package com.daodecode.cas.web.support;

    import javax.servlet.http.Cookie;

    public class HttpOnlySupportingCookieGenerator
            extends org.jasig.cas.web.support.CookieRetrievingCookieGenerator {
        private boolean cookieHttpOnly = false;

        public void setCookieHttpOnly(boolean cookieHttpOnly) {
            this.cookieHttpOnly = cookieHttpOnly;
        }

        @Override
        protected Cookie createCookie(String cookieValue) {
            Cookie cookie = super.createCookie(cookieValue);
            cookie.setHttpOnly(cookieHttpOnly);
            return cookie;
        }
    }
```
</li>
<li> override TGT Cookie Generator creation providing your version of <code>ticketGrantingTicketCookieGenerator.xml</code>

``` xml
    <bean id="ticketGrantingTicketCookieGenerator"
          class="com.daodecode.cas.web.support.HttpOnlySupportingCookieGenerator"
        cookieSecure="${cas.cookie.secure}"
        cookieHttpOnly="${cas.cookie.httponly}"
        cookieMaxAge="-1"
        cookieName="CASTGC"
        cookiePath="${cas.cookie.path}" />
```
</li>
</ol>


<p>done!</p>
]]></content>
  </entry>
  
</feed>
