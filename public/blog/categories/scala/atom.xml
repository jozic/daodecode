<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: scala | Dao De Code]]></title>
  <link href="http://daodecode.com/blog/categories/scala/atom.xml" rel="self"/>
  <link href="http://daodecode.com/"/>
  <updated>2013-10-28T17:28:34-04:00</updated>
  <id>http://daodecode.com/</id>
  <author>
    <name><![CDATA[Eugene Platonov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ReactiveMongo, macros and  NoSuchElementException: None.get]]></title>
    <link href="http://daodecode.com/blog/2013/10/27/reactivemongo/"/>
    <updated>2013-10-27T20:40:00-04:00</updated>
    <id>http://daodecode.com/blog/2013/10/27/reactivemongo</id>
    <content type="html"><![CDATA[<p><a href="http://reactivemongo.org/">ReactiveMongo</a> employs <a href="http://scalamacros.org/">scala macros</a>
 to generate readers(deserializers) and writers(serializers)
for scala case classes. They work pretty good, but sometimes you can get a
<code>java.lang.NoSuchElementException</code> with message <code>None.get</code> :(</p>

<p>Let's say you have
``` scala
case class Person(fisrtName: String, lastName: String, age: Int)</p>

<p>object readers {
  implicit val personReader = Macros.reader[Person]
}</p>

<p>```</p>

<p>and somewhere in your code you use it
<code>scala
import readers._
// ...
def findByFirstName(fName: String) =
  personCollection.find(BSONDocument("firstName" -&gt; fName)).one[Person]
</code></p>

<p>if your data is correct you are good, but let's say you have some corrupted documents, for example <code>Joe</code> doesn't have last name
```</p>

<blockquote><p>db.person.find().pretty()
{</p>

<pre><code>"_id" : ObjectId("526ecf6f7e04ab5f2d1a12ba"),
"firstName" : "Eugene",
"lastName" : "Platonov",
"age" : 27
</code></pre>

<p>}
{</p>

<pre><code>"_id" : ObjectId("526ecf817e04ab5f2d1a12bb"),
"firstName" : "Joe",
"age" : 23
</code></pre>

<p>}
```</p></blockquote>

<p><code>findByFirstName("Eugene")</code> will return Future of Success, but <code>findByFirstName("Joe")</code>
will return you Future of Failure with ugly <code>java.util.NoSuchElementException: None.get</code> which
points to the line where your macro-generated reader is defined.</p>

<p>Here is another, even more interesting, but much harder to spot problem:</p>

<p>If you insert your person doc via mongo shell</p>

<p><code>
 db.person.insert({firstName: "Eugene", lastName: "Platonov", age: 27})
</code>
the type of <code>age</code> field will be ... right, <a href="http://docs.mongodb.org/manual/core/shell-types/">Double</a>.
Despite that mongo shell will show you <code>"age" : 27</code> when you search for that document.
And again reactivemongo will throw a <code>NoSuchElementException</code> exception at you. Sigh.</p>

<p>To avoid it insert integers as <code>NumberInt</code>s</p>

<p><code>
db.person.insert({firstName: "Eugene", lastName: "Platonov", age: NumberInt(27)})
</code></p>

<p>I think reactive mongo should be more explicit about what went wrong and hopefully
this will be <a href="https://github.com/ReactiveMongo/ReactiveMongo/pull/131">fixed soon</a>, but if not, you know where the dog lies buried.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Akka: Stop Your Router Gracefully]]></title>
    <link href="http://daodecode.com/blog/2013/07/12/akka-stop-your-router-gracefully/"/>
    <updated>2013-07-12T23:34:00-04:00</updated>
    <id>http://daodecode.com/blog/2013/07/12/akka-stop-your-router-gracefully</id>
    <content type="html"><![CDATA[<p>Let's say you want to find an answer to <a href="http://en.wikipedia.org/wiki/Answer_to_Life,_the_Universe,_and_Everything">Life, the Universe and Everything</a>
 and you know it will take some time,
 so you want to do it in parralel while doing something else (DSE).<br/>
You say to yourself "okay, I'll fire an actor and send him a message or bunch of messages, then DSE and collect my results from the actor after i'm done"</p>

<p>So you've got it coded
``` scala
  val answerToLifeTheUniverseAndEverything = new AtomicInteger(0)</p>

<p>  val actor = system.actorOf(Props(new Actor {</p>

<pre><code>def receive = {
  case i: Int =&gt; {
    answerToLifeTheUniverseAndEverything.getAndIncrement()
  }
  case _ =&gt;
}
</code></pre>

<p>  }))
```</p>

<p>Now you want make it work and get results at the end. You need to make sure to access the result after all work is done.
From <a href="http://akka.io/docs/">akka documentation</a> you found out that <a href="http://doc.akka.io/api/akka/2.2.0/index.html#akka.pattern.GracefulStopSupport"><code>akka.pattern.GracefulStopSupport</code></a>
seems a good choice to do it.</p>

<p>```
  for (i &lt;- 1 to 42) actor ! i</p>

<p>  // DO SOMETHING ELSE</p>

<p>  import akka.pattern.gracefulStop</p>

<p>  Await.result(gracefulStop(actor, timeout), timeout)</p>

<p>  println(s"We found the answer, it's ${answerToLifeTheUniverseAndEverything.get}")</p>

<p><code>
as a result you see
</code>
We found the answer, it's 42
```
Nice!<br/>
But then you think "I can do it not only in parallel to my DSE, but compute it in many independent actors, so it will be done even faster".
Using a router actor seems an easy way to do it.</p>

<p>```
  val answerToLifeTheUniverseAndEverything = new AtomicInteger(0)</p>

<p>  val router = system.actorOf(Props(new Actor {</p>

<pre><code>def receive = {
  case i: Int =&gt; {
    answerToLifeTheUniverseAndEverything.getAndIncrement()
  }
  case _ =&gt;
}
</code></pre>

<p>  }).withRouter(RoundRobinRouter(nrOfInstances = 10)))</p>

<p>  for (i &lt;- 1 to 42) router ! i</p>

<p>  // DO SOMETHING ELSE</p>

<p>  import akka.pattern.gracefulStop</p>

<p>  Await.result(gracefulStop(router, timeout), timeout)</p>

<p>  println(s"We found the answer, it's ${answerToLifeTheUniverseAndEverything.get}")
```</p>

<p>Router sends messages to routees in round-robin fashion and routees do the work parallel to each other.
At the end you again see
<code>
We found the answer, it's 42
</code></p>

<p>Super nice! You're done! You can go and grab a milk shake. Or do you?  <br/>
Computing answer to Life, the Universe and Everything is a complex task, so it really should take some time and effort to calculate it.<br/>
Let's add <code>Thread.sleep(1000)</code> pretending that our actor(or rather many actors) do something time consuming.
```</p>

<pre><code>def receive = {
  case i: Int =&gt; {
    Thread.sleep(1000)
    answerToLifeTheUniverseAndEverything.getAndIncrement()
  }
  case _ =&gt;
}
</code></pre>

<p><code>
And then while you enjoing your shake all of a sudden you see
</code>
We found the answer, it's 10
<code>``
What the hell?  
The thing is</code>gracefullStop<code>sends a</code>PoisonPill<code>to an actor, which is a router in our case.
Once an actor gets to a</code>PoisonPill<code>message it decides to die and as a good parent, he can't allow his children stay and suffer in this cruel world, so he kills them too.  
"But</code>PoisonPill` will be the last message my router gets, right? So it dies after all other messages are processed." you say.<br/>
Right, but processing a message from a router's point of view is just to send it to one of its routees.<br/>
But then it dies when they still in progress and because the number of messages (42) is greater than number of routees (10) they all have more than one message to process.
So they do, until their <em>Daddy</em> comes and gets them to the <em>Land of Peace</em>. Their unprocessed messages are lost.
Thus the answer to Life, the Universe and Everything you get is 10. It can be different, but it usually will be around a number of routees.</p>

<p>So what is the solution?</p>

<p>The answer before akka 2.2 is don't use <code>gracefulStop</code> with routers! (Of course you can take a look at the source code and make your own version of <code>gracefulStop</code>)
Since 2.2 you can specify stopMessage which is a <code>PoisonPill</code> by default. So the line will look like</p>

<p><code>
  Await.result(gracefulStop(router, timeout, Broadcast(PoisonPill)), timeout)
</code>
And now the answer is correct again :)
<code>
We found the answer, it's 42
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debug an sbt plugin in IntelliJ IDEA]]></title>
    <link href="http://daodecode.com/blog/2013/04/19/debug-an-sbt-plugin-in-intellij-idea/"/>
    <updated>2013-04-19T12:51:00-04:00</updated>
    <id>http://daodecode.com/blog/2013/04/19/debug-an-sbt-plugin-in-intellij-idea</id>
    <content type="html"><![CDATA[<p>So you have your own sbt plugin (or someone's plugin if you are not so cool and sexy) and you want to debug it.
It happens that there is nothing easier than that. If you run sbt through <a href="https://github.com/paulp/sbt-extras">sbt-extras</a> script (if you don't you should)
just start your test sbt app with the plugin added to the build with the following command
<code>
sbt -jvm-debug 5005
</code></p>

<p>You can use any port, I use 5005 because it's a default port for remote debug configuration in <a href="http://www.jetbrains.com/idea/">IntelliJ IDEA</a> which I use for scala development.
And if you are cool and sexy, you know... :)</p>

<p>This is how your sbt console should look like after you start it:
```
jozic@laptop ~/projects/sbt-about-plugins $ sbt -jvm-debug 5005
Detected sbt version 0.12.3
Starting sbt: invoke with -help for other options
Listening for transport dt_socket at address: 5005
[info] Loading global plugins from /home/jozic/.sbt/plugins
[info] Loading project definition from /home/jozic/projects/sbt-about-plugins/project
[info] Set current project to sbt-about-plugins (in build file:/home/jozic/projects/sbt-about-plugins/)</p>

<blockquote><p>```</p></blockquote>

<p>Then open your project in IDEA (you can generate IDEA project files using
<a href="https://github.com/mpeltonen/sbt-idea">sbt-idea</a> plugin) and create remote debug configuration.
<img src="/images/sbt-debug/idea.debug.configuration.png">
You can change port, but 5005 will do in our case, so you literaly can save default configuration.
Run it and you should get the following line in IDEA console:
<code>
Connected to the target VM, address: 'localhost:5005', transport: 'socket'
</code></p>

<p>After that put a breakpoint inside your plugin command, switch to sbt console, run your command and here you go!
<img src="/images/sbt-debug/idea.breakpoint.in.action.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Security.Authenticated in Play 2.0 and 2.1]]></title>
    <link href="http://daodecode.com/blog/2013/03/08/testing-security-dot-authenticated-in-play-2-dot-0-and-2-dot-1/"/>
    <updated>2013-03-08T21:00:00-05:00</updated>
    <id>http://daodecode.com/blog/2013/03/08/testing-security-dot-authenticated-in-play-2-dot-0-and-2-dot-1</id>
    <content type="html"><![CDATA[<p>You have a <a href="http://www.playframework.com/">Play</a> application and let's say you want to add some simple authentication logic to restrict access to your actions.
You want all your users to provide a ticket (e.g <a href="https://wiki.jasig.org/display/CAS/Proxy+CAS+Walkthrough">cas proxy ticket</a>)
in a request header, so you can use the ticket to authenticate them.</p>

<p>Play's <a href="http://www.playframework.com/documentation/api/2.1.0/scala/index.html#play.api.mvc.Security$">Security.Authenticated</a>
to the rescue!</p>

<p>You can come up with something like this in Play 2.1:</p>

<p>``` scala
trait Secured {</p>

<p>  val logger = Logger("secured")</p>

<p>  final def fail(reason: String) = {</p>

<pre><code>logger.debug(s"Access attempt failed: $reason")
Unauthorized("must be authenticated")
</code></pre>

<p>  }</p>

<p>  final def secured<a href="action:%20Action[A]">A</a> =</p>

<pre><code>Security.Authenticated(
  req =&gt; req.headers.get("authTicket"),
  _ =&gt; fail("no ticket found")) {
  ticket =&gt; Action(action.parser) {
    request =&gt; withTicket(ticket) {
      action(request)
    }
  }
}
</code></pre>

<p>  private def withTicket(ticket: String)(produceResult: => Result): Result =</p>

<pre><code>Async {
  isValid(ticket) map {
    valid =&gt; if (valid) produceResult else fail(s"provided ticket $ticket is invalid")
  }
}
</code></pre>

<p>  def isValid(ticket: String): Future[Boolean]
}
<code>``
In Play 2.0 it looks almost same except that</code>isValid<code>returns _old_ play's</code>Promise<code>instead of scala's</code>Future`.</p>

<p>And you can use it like this:</p>

<p>``` scala</p>

<pre><code>def securedAction = secured {
  Action {
    request =&gt; Ok("Am I protected?")
  }
}
</code></pre>

<p>```</p>

<p>All good, but how do we know it works? Test it!</p>

<p>Let's create a fake controller which has both secured and non-secured actions. And we'll use it in our tests, or rather <a href="http://etorreborre.github.com/specs2/">specs</a>.</p>

<p>``` scala
  object FakeController extends Controller with Secured {</p>

<pre><code>def securedAction = secured {
  Action {
    request =&gt; Ok("Am I protected?")
  }
}

def nonSecuredAction = Action {
  request =&gt; Ok("I don't care")
}

def isValid(ticket: String) = Promise.pure(ticket == "valid")
</code></pre>

<p>  }
```</p>

<p>To test that <code>authTicket</code> param is required we can have something like this:</p>

<p>``` scala</p>

<pre><code>"return UNAUTHORIZED if `authTicket` param is not provided" in {
  running(app) {
    val result = FakeController.securedAction process FakeRequest()
    status(result) must_== UNAUTHORIZED
    contentAsString(result) must_== "must be authenticated"
  }
}
</code></pre>

<p>```</p>

<p>Here <code>app</code> is a <a href="http://www.playframework.com/documentation/api/2.1.0/scala/index.html#play.api.test.FakeApplication">FakeApplication</a>
 and <code>process</code> is our method (added through implicits) which returns a <a href="http://www.playframework.com/documentation/api/2.1.0/scala/index.html#play.api.mvc.Result">Result</a>
  given a <a href="http://www.playframework.com/documentation/api/2.1.0/scala/index.html#play.api.mvc.Request">Request</a>.</p>

<p>Please note in Play 2.0 <code>status</code> and <code>contentAsString</code> don't know how to handle <a href="http://www.playframework.com/documentation/api/2.1.0/scala/index.html#play.api.mvc.AsyncResult">AsyncResults</a>,
so with this implementation of <code>withTicket</code> you need to do some trible dance to make it work.</p>

<p>In Play 2.0 <code>Authenticated</code> returnes <code>Action[(Action[A], A)]</code> so our <code>process</code> looks like this:</p>

<p>``` scala
  implicit def action2actionExecutor<a href="wrapped:%20Action[(Action[A],%20A">A</a>]): ActionExecutor[A]
  = new ActionExecutor<a href="wrapped">A</a></p>

<p>  class ActionExecutor<a href="wrapped:%20Action[(Action[A],%20A">A</a>]) {</p>

<pre><code>def process(request: Request[A]): Result = wrapped.parser(request).run.await.get match {
  case Left(errorResult) =&gt; errorResult
  case Right((innerAction, _)) =&gt; innerAction(request)
}
</code></pre>

<p>  }
```</p>

<p>in Play 2.1 we get just <a href="">EssentialAction</a> (and we can use <a href="">implicit class</a>) so it looks much simple:</p>

<p>``` scala
  implicit class ActionExecutor(action: EssentialAction) {</p>

<pre><code>def process[A](request: Request[A]): Result =
  concurrent.Await.result(action(request).run, Duration(1, "sec"))
</code></pre>

<p>  }
```</p>

<p>To test what happens if <code>authTicket</code> is provided but is not valid we can do the following:</p>

<p>``` scala</p>

<pre><code>def requestWithAuthTicket(ticket: String = "invalid") =
  FakeRequest().withHeaders("authTicket" -&gt; ticket)

"return UNAUTHORIZED if `authTicket` param is not valid" in {
  running(app) {
    val result = FakeController.securedAction process requestWithAuthTicket()
    status(result) must_== UNAUTHORIZED
    contentAsString(result) must_== "must be authenticated"
  }
}
</code></pre>

<p>```
To make sure that it allows access when ticket is valid let's add this</p>

<p>``` scala</p>

<pre><code>"return whatever it returns if `authTicket` param is valid" in {
  running(app) {
    val result = FakeController.securedAction process requestWithAuthTicket(ticket = "valid")
    status(result) must_== OK
    contentAsString(result) must_== "Am I protected?"
  }
}
</code></pre>

<p>```</p>

<p>Full source code can be found on <a href="https://github.com/jozic/play-security-authenticated-tests">github</a> in branches play20 and play20 correspondently.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Camel and Scala 2.10]]></title>
    <link href="http://daodecode.com/blog/2013/02/28/camel-and-scala-2-dot-10/"/>
    <updated>2013-02-28T23:33:00-05:00</updated>
    <id>http://daodecode.com/blog/2013/02/28/camel-and-scala-2-dot-10</id>
    <content type="html"><![CDATA[<p><a href="http://camel.apache.org/">Camel</a> and <a href="http://www.scala-lang.org/">Scala</a> is a good combination,
but if you like to be on the bleeding edge and almost done converting your scala app to <a href="http://www.scala-lang.org/node/27499">2.10</a>
you can find that camel still doesn't have a stable release supporting scala 2.10.
So SNAPSHOT will do the trick in this case, but you know... it's a SNAPSHOT :)<br/>
All you need is apache snapshots repo and camel-scala 2.11-SNAPSHOT</p>

<p>``` scala
resolvers += "Apache Snapshots" at "http://repository.apache.org/snapshots/"</p>

<p>libraryDependencies += "org.apache.camel" % "camel-scala" % "2.11-SNAPSHOT"
```
Add those to your sbt build and you are all set.</p>
]]></content>
  </entry>
  
</feed>
