<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Dao De Code]]></title>
  <link href="http://daodecode.com/atom.xml" rel="self"/>
  <link href="http://daodecode.com/"/>
  <updated>2013-04-21T23:53:36-04:00</updated>
  <id>http://daodecode.com/</id>
  <author>
    <name><![CDATA[Eugene Platonov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Debug an sbt plugin in IntelliJ IDEA]]></title>
    <link href="http://daodecode.com/blog/2013/04/19/debug-an-sbt-plugin-in-intellij-idea/"/>
    <updated>2013-04-19T12:51:00-04:00</updated>
    <id>http://daodecode.com/blog/2013/04/19/debug-an-sbt-plugin-in-intellij-idea</id>
    <content type="html"><![CDATA[<p>So you have your own sbt plugin (or someone&#8217;s plugin if you are not so cool and sexy) and you want to debug it.
It happens that there is nothing easier than that. If you run sbt through <a href="https://github.com/paulp/sbt-extras">sbt-extras</a> script (if you don&#8217;t you should)
just start your test sbt app with the plugin added to the build with the following command</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sbt -jvm-debug 5005</span></code></pre></td></tr></table></div></figure>


<p>You can use any port, I use 5005 because it&#8217;s a default port for remote debug configuration in <a href="http://www.jetbrains.com/idea/">IntelliJ IDEA</a> which I use for scala development.
And if you are cool and sexy, you know&#8230; :)</p>

<p>This is how your sbt console should look like after you start it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jozic@laptop ~/projects/sbt-about-plugins $ sbt -jvm-debug 5005
</span><span class='line'>Detected sbt version 0.12.3
</span><span class='line'>Starting sbt: invoke with -help for other options
</span><span class='line'>Listening for transport dt_socket at address: 5005
</span><span class='line'>[info] Loading global plugins from /home/jozic/.sbt/plugins
</span><span class='line'>[info] Loading project definition from /home/jozic/projects/sbt-about-plugins/project
</span><span class='line'>[info] Set current project to sbt-about-plugins (in build file:/home/jozic/projects/sbt-about-plugins/)
</span><span class='line'>&gt;</span></code></pre></td></tr></table></div></figure>


<p>Then open your project in IDEA (you can generate IDEA project files using
<a href="https://github.com/mpeltonen/sbt-idea">sbt-idea</a> plugin) and create remote debug configuration.
<img src="http://daodecode.com/images/sbt-debug/idea.debug.configuration.png">
You can change port, but 5005 will do in our case, so you literaly can save default configuration.
Run it and you should get the following line in IDEA console:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Connected to the target VM, address: 'localhost:5005', transport: 'socket'</span></code></pre></td></tr></table></div></figure>


<p>After that put a breakpoint inside your plugin command, switch to sbt console, run your command and here you go!
<img src="http://daodecode.com/images/sbt-debug/idea.breakpoint.in.action.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CASTGC Cookie and HttpOnly Flag]]></title>
    <link href="http://daodecode.com/blog/2013/03/25/castgc-cookie-and-httponly-flag/"/>
    <updated>2013-03-25T10:56:00-04:00</updated>
    <id>http://daodecode.com/blog/2013/03/25/castgc-cookie-and-httponly-flag</id>
    <content type="html"><![CDATA[<p>Let&#8217;s assume you employ <a href="http://www.jasig.org/cas">CAS</a> to be your single sign-on solution. Upon receiving correct credentials from the user CAS generates CASTGC cookie,
   which is marked with <a href="http://en.wikipedia.org/wiki/HTTP_cookie#Secure_and_HttpOnly">Secured</a> flag. And assume you want to add <a href="http://en.wikipedia.org/wiki/HTTP_cookie#Secure_and_HttpOnly">HttpOnly</a>
   flag to the cookie, to prevent accessing it <code>via non-HTTP methods</code>.
   CAS of version 3.5.0 depends on <a href="http://download.oracle.com/otndocs/jcp/servlet-2.5-mrel-eval-oth-JSpec/">servlet-api 2.5</a> and fancy <a href="http://docs.oracle.com/javaee/6/api/javax/servlet/http/Cookie.html#setHttpOnly(boolean)">setHttpOnly</a>
   method has been added in version 3.0 of the servlet-api. So how do we deal with it?</p>

<p>Assuming you run your CAS in a servlet container based on <a href="http://download.oracle.com/otndocs/jcp/servlet-3.0-fr-oth-JSpec/">servlet 3.0 specification</a>
 (e.g. <a href="http://eclipse.org/jetty/">Jetty 8</a> or <a href="http://tomcat.apache.org/download-70.cgi">Tomcat 7</a>) and use <a href="http://maven.apache.org/">maven</a> as your build tool you can do the following to make it happen:</p>

<ol>
<li> exclude old (2.5 and lower) servlet-api jars from dependencies. For example

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.jasig.cas<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>cas-server-integration-restlet<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>${casVersion}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;exclusions&gt;</span>
</span><span class='line'>        <span class="nt">&lt;exclusion&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>javax.servlet<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>servlet-api<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/exclusion&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/exclusions&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>
</li>
<li> include new servlet-api jar (notice that artifact id has been changed)

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>javax.servlet<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>javax.servlet-api<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>3.0.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>
</li>
<li> create your own version of <a href="https://github.com/Jasig/cas/blob/master/cas-server-webapp/src/main/java/org/jasig/cas/web/support/CookieRetrievingCookieGenerator.java">CookieRetrievingCookieGenerator</a>
which supports HttpOnly flag. You want to extend this class because CAS relies on it internally.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">daodecode</span><span class="o">.</span><span class="na">cas</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">support</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.Cookie</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HttpOnlySupportingCookieGenerator</span>
</span><span class='line'>        <span class="kd">extends</span> <span class="n">org</span><span class="o">.</span><span class="na">jasig</span><span class="o">.</span><span class="na">cas</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">CookieRetrievingCookieGenerator</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">cookieHttpOnly</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCookieHttpOnly</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">cookieHttpOnly</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">cookieHttpOnly</span> <span class="o">=</span> <span class="n">cookieHttpOnly</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">Cookie</span> <span class="nf">createCookie</span><span class="o">(</span><span class="n">String</span> <span class="n">cookieValue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Cookie</span> <span class="n">cookie</span> <span class="o">=</span> <span class="kd">super</span><span class="o">.</span><span class="na">createCookie</span><span class="o">(</span><span class="n">cookieValue</span><span class="o">);</span>
</span><span class='line'>        <span class="n">cookie</span><span class="o">.</span><span class="na">setHttpOnly</span><span class="o">(</span><span class="n">cookieHttpOnly</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cookie</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
</li>
<li> override TGT Cookie Generator creation providing your version of <code>ticketGrantingTicketCookieGenerator.xml</code>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;ticketGrantingTicketCookieGenerator&quot;</span>
</span><span class='line'>      <span class="na">class=</span><span class="s">&quot;com.daodecode.cas.web.support.HttpOnlySupportingCookieGenerator&quot;</span>
</span><span class='line'>    <span class="na">cookieSecure=</span><span class="s">&quot;${cas.cookie.secure}&quot;</span>
</span><span class='line'>    <span class="na">cookieHttpOnly=</span><span class="s">&quot;${cas.cookie.httponly}&quot;</span>
</span><span class='line'>    <span class="na">cookieMaxAge=</span><span class="s">&quot;-1&quot;</span>
</span><span class='line'>  <span class="na">cookieName=</span><span class="s">&quot;CASTGC&quot;</span>
</span><span class='line'>  <span class="na">cookiePath=</span><span class="s">&quot;${cas.cookie.path}&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>
</li>
</ol>


<p>done!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Security.Authenticated in Play 2.0 and 2.1]]></title>
    <link href="http://daodecode.com/blog/2013/03/08/testing-security-dot-authenticated-in-play-2-dot-0-and-2-dot-1/"/>
    <updated>2013-03-08T21:00:00-05:00</updated>
    <id>http://daodecode.com/blog/2013/03/08/testing-security-dot-authenticated-in-play-2-dot-0-and-2-dot-1</id>
    <content type="html"><![CDATA[<p>You have a <a href="http://www.playframework.com/">Play</a> application and let&#8217;s say you want to add some simple authentication logic to restrict access to your actions.
You want all your users to provide a ticket (e.g <a href="https://wiki.jasig.org/display/CAS/Proxy+CAS+Walkthrough">cas proxy ticket</a>)
in a request header, so you can use the ticket to authenticate them.</p>

<p>Play&#8217;s <a href="http://www.playframework.com/documentation/api/2.1.0/scala/index.html#play.api.mvc.Security$">Security.Authenticated</a>
to the rescue!</p>

<p>You can come up with something like this in Play 2.1:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Secured</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">logger</span> <span class="k">=</span> <span class="nc">Logger</span><span class="o">(</span><span class="s">&quot;secured&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">final</span> <span class="k">def</span> <span class="n">fail</span><span class="o">(</span><span class="n">reason</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="n">debug</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Access attempt failed: $reason&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="nc">Unauthorized</span><span class="o">(</span><span class="s">&quot;must be authenticated&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">final</span> <span class="k">def</span> <span class="n">secured</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">action</span><span class="k">:</span> <span class="kt">Action</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span> <span class="k">=</span>
</span><span class='line'>    <span class="nc">Security</span><span class="o">.</span><span class="nc">Authenticated</span><span class="o">(</span>
</span><span class='line'>      <span class="n">req</span> <span class="k">=&gt;</span> <span class="n">req</span><span class="o">.</span><span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;authTicket&quot;</span><span class="o">),</span>
</span><span class='line'>      <span class="k">_</span> <span class="k">=&gt;</span> <span class="n">fail</span><span class="o">(</span><span class="s">&quot;no ticket found&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ticket</span> <span class="k">=&gt;</span> <span class="nc">Action</span><span class="o">(</span><span class="n">action</span><span class="o">.</span><span class="n">parser</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">request</span> <span class="k">=&gt;</span> <span class="n">withTicket</span><span class="o">(</span><span class="n">ticket</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">action</span><span class="o">(</span><span class="n">request</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="k">def</span> <span class="n">withTicket</span><span class="o">(</span><span class="n">ticket</span><span class="k">:</span> <span class="kt">String</span><span class="o">)(</span><span class="n">produceResult</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="nc">Result</span><span class="o">)</span><span class="k">:</span> <span class="kt">Result</span> <span class="o">=</span>
</span><span class='line'>    <span class="nc">Async</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">isValid</span><span class="o">(</span><span class="n">ticket</span><span class="o">)</span> <span class="n">map</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">valid</span> <span class="k">=&gt;</span> <span class="k">if</span> <span class="o">(</span><span class="n">valid</span><span class="o">)</span> <span class="n">produceResult</span> <span class="k">else</span> <span class="n">fail</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;provided ticket $ticket is invalid&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">isValid</span><span class="o">(</span><span class="n">ticket</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Play 2.0 it looks almost same except that <code>isValid</code> returns <em>old</em> play&#8217;s <code>Promise</code> instead of scala&#8217;s <code>Future</code>.</p>

<p>And you can use it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">securedAction</span> <span class="k">=</span> <span class="n">secured</span> <span class="o">{</span>
</span><span class='line'>  <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">request</span> <span class="k">=&gt;</span> <span class="nc">Ok</span><span class="o">(</span><span class="s">&quot;Am I protected?&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>All good, but how do we know it works? Test it!</p>

<p>Let&#8217;s create a fake controller which has both secured and non-secured actions. And we&#8217;ll use it in our tests, or rather <a href="http://etorreborre.github.com/specs2/">specs</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">object</span> <span class="nc">FakeController</span> <span class="k">extends</span> <span class="nc">Controller</span> <span class="k">with</span> <span class="nc">Secured</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">securedAction</span> <span class="k">=</span> <span class="n">secured</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">request</span> <span class="k">=&gt;</span> <span class="nc">Ok</span><span class="o">(</span><span class="s">&quot;Am I protected?&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="n">nonSecuredAction</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">request</span> <span class="k">=&gt;</span> <span class="nc">Ok</span><span class="o">(</span><span class="s">&quot;I don&#39;t care&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="n">isValid</span><span class="o">(</span><span class="n">ticket</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Promise</span><span class="o">.</span><span class="n">pure</span><span class="o">(</span><span class="n">ticket</span> <span class="o">==</span> <span class="s">&quot;valid&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To test that <code>authTicket</code> param is required we can have something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="s">&quot;return UNAUTHORIZED if `authTicket` param is not provided&quot;</span> <span class="n">in</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">running</span><span class="o">(</span><span class="n">app</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="nc">FakeController</span><span class="o">.</span><span class="n">securedAction</span> <span class="n">process</span> <span class="nc">FakeRequest</span><span class="o">()</span>
</span><span class='line'>    <span class="n">status</span><span class="o">(</span><span class="n">result</span><span class="o">)</span> <span class="n">must_==</span> <span class="nc">UNAUTHORIZED</span>
</span><span class='line'>    <span class="n">contentAsString</span><span class="o">(</span><span class="n">result</span><span class="o">)</span> <span class="n">must_==</span> <span class="s">&quot;must be authenticated&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here <code>app</code> is a <a href="http://www.playframework.com/documentation/api/2.1.0/scala/index.html#play.api.test.FakeApplication">FakeApplication</a>
 and <code>process</code> is our method (added through implicits) which returns a <a href="http://www.playframework.com/documentation/api/2.1.0/scala/index.html#play.api.mvc.Result">Result</a>
  given a <a href="http://www.playframework.com/documentation/api/2.1.0/scala/index.html#play.api.mvc.Request">Request</a>.</p>

<p>Please note in Play 2.0 <code>status</code> and <code>contentAsString</code> don&#8217;t know how to handle <a href="http://www.playframework.com/documentation/api/2.1.0/scala/index.html#play.api.mvc.AsyncResult">AsyncResults</a>,
so with this implementation of <code>withTicket</code> you need to do some trible dance to make it work.</p>

<p>In Play 2.0 <code>Authenticated</code> returnes <code>Action[(Action[A], A)]</code> so our <code>process</code> looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">implicit</span> <span class="k">def</span> <span class="n">action2actionExecutor</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">wrapped</span><span class="k">:</span> <span class="kt">Action</span><span class="o">[(</span><span class="kt">Action</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span>, <span class="kt">A</span><span class="o">)])</span><span class="k">:</span> <span class="kt">ActionExecutor</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span>
</span><span class='line'>  <span class="k">=</span> <span class="k">new</span> <span class="nc">ActionExecutor</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">wrapped</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">ActionExecutor</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">wrapped</span><span class="k">:</span> <span class="kt">Action</span><span class="o">[(</span><span class="kt">Action</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span>, <span class="kt">A</span><span class="o">)])</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">process</span><span class="o">(</span><span class="n">request</span><span class="k">:</span> <span class="kt">Request</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span><span class="k">:</span> <span class="kt">Result</span> <span class="o">=</span> <span class="n">wrapped</span><span class="o">.</span><span class="n">parser</span><span class="o">(</span><span class="n">request</span><span class="o">).</span><span class="n">run</span><span class="o">.</span><span class="n">await</span><span class="o">.</span><span class="n">get</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">Left</span><span class="o">(</span><span class="n">errorResult</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">errorResult</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">Right</span><span class="o">((</span><span class="n">innerAction</span><span class="o">,</span> <span class="k">_</span><span class="o">))</span> <span class="k">=&gt;</span> <span class="n">innerAction</span><span class="o">(</span><span class="n">request</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>in Play 2.1 we get just <a href="">EssentialAction</a> (and we can use <a href="">implicit class</a>) so it looks much simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">implicit</span> <span class="k">class</span> <span class="nc">ActionExecutor</span><span class="o">(</span><span class="n">action</span><span class="k">:</span> <span class="kt">EssentialAction</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">process</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">request</span><span class="k">:</span> <span class="kt">Request</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span><span class="k">:</span> <span class="kt">Result</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">concurrent</span><span class="o">.</span><span class="nc">Await</span><span class="o">.</span><span class="n">result</span><span class="o">(</span><span class="n">action</span><span class="o">(</span><span class="n">request</span><span class="o">).</span><span class="n">run</span><span class="o">,</span> <span class="nc">Duration</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="s">&quot;sec&quot;</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To test what happens if <code>authTicket</code> is provided but is not valid we can do the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">requestWithAuthTicket</span><span class="o">(</span><span class="n">ticket</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">&quot;invalid&quot;</span><span class="o">)</span> <span class="k">=</span>
</span><span class='line'>  <span class="nc">FakeRequest</span><span class="o">().</span><span class="n">withHeaders</span><span class="o">(</span><span class="s">&quot;authTicket&quot;</span> <span class="o">-&gt;</span> <span class="n">ticket</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="s">&quot;return UNAUTHORIZED if `authTicket` param is not valid&quot;</span> <span class="n">in</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">running</span><span class="o">(</span><span class="n">app</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="nc">FakeController</span><span class="o">.</span><span class="n">securedAction</span> <span class="n">process</span> <span class="n">requestWithAuthTicket</span><span class="o">()</span>
</span><span class='line'>    <span class="n">status</span><span class="o">(</span><span class="n">result</span><span class="o">)</span> <span class="n">must_==</span> <span class="nc">UNAUTHORIZED</span>
</span><span class='line'>    <span class="n">contentAsString</span><span class="o">(</span><span class="n">result</span><span class="o">)</span> <span class="n">must_==</span> <span class="s">&quot;must be authenticated&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To make sure that it allows access when ticket is valid let&#8217;s add this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="s">&quot;return whatever it returns if `authTicket` param is valid&quot;</span> <span class="n">in</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">running</span><span class="o">(</span><span class="n">app</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="nc">FakeController</span><span class="o">.</span><span class="n">securedAction</span> <span class="n">process</span> <span class="n">requestWithAuthTicket</span><span class="o">(</span><span class="n">ticket</span> <span class="k">=</span> <span class="s">&quot;valid&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">status</span><span class="o">(</span><span class="n">result</span><span class="o">)</span> <span class="n">must_==</span> <span class="nc">OK</span>
</span><span class='line'>    <span class="n">contentAsString</span><span class="o">(</span><span class="n">result</span><span class="o">)</span> <span class="n">must_==</span> <span class="s">&quot;Am I protected?&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Full source code can be found on <a href="https://github.com/jozic/play-security-authenticated-tests">github</a> in branches play20 and play20 correspondently.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Camel and Scala 2.10]]></title>
    <link href="http://daodecode.com/blog/2013/02/28/camel-and-scala-2-dot-10/"/>
    <updated>2013-02-28T23:33:00-05:00</updated>
    <id>http://daodecode.com/blog/2013/02/28/camel-and-scala-2-dot-10</id>
    <content type="html"><![CDATA[<p><a href="http://camel.apache.org/">Camel</a> and <a href="http://www.scala-lang.org/">Scala</a> is a good combination,
but if you like to be on the bleeding edge and almost done converting your scala app to <a href="http://www.scala-lang.org/node/27499">2.10</a>
you can find that camel still doesn&#8217;t have a stable release supporting scala 2.10.
So SNAPSHOT will do the trick in this case, but you know&#8230; it&#8217;s a SNAPSHOT :)<br/>
All you need is apache snapshots repo and camel-scala 2.11-SNAPSHOT</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">resolvers</span> <span class="o">+=</span> <span class="s">&quot;Apache Snapshots&quot;</span> <span class="n">at</span> <span class="s">&quot;http://repository.apache.org/snapshots/&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">libraryDependencies</span> <span class="o">+=</span> <span class="s">&quot;org.apache.camel&quot;</span> <span class="o">%</span> <span class="s">&quot;camel-scala&quot;</span> <span class="o">%</span> <span class="s">&quot;2.11-SNAPSHOT&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add those to your sbt build and you are all set.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Helper functions for building streams in Racket]]></title>
    <link href="http://daodecode.com/blog/2013/02/25/helper-functions-for-building-streams-in-racket/"/>
    <updated>2013-02-25T00:05:00-05:00</updated>
    <id>http://daodecode.com/blog/2013/02/25/helper-functions-for-building-streams-in-racket</id>
    <content type="html"><![CDATA[<p>In <a href="http://racket-lang.org">Racket</a> you can define <a href="http://docs.racket-lang.org/reference/streams.html">streams</a> which are kind of lazy lists.
 So here are a couple of helper functions for easier stream creation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="c1">; returns stream</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">stream-builder</span> <span class="nv">seed</span> <span class="nv">current-element</span> <span class="nv">next-element</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">letrec </span><span class="p">([</span><span class="nf">lazy-seq</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
</span><span class='line'>                       <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">current-element</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="k">lambda </span><span class="p">()</span> <span class="p">(</span><span class="nf">lazy-seq</span> <span class="p">(</span><span class="nf">next-element</span> <span class="nv">x</span><span class="p">)))))])</span>
</span><span class='line'>    <span class="p">(</span><span class="k">lambda </span><span class="p">()</span> <span class="p">(</span><span class="nf">lazy-seq</span> <span class="nv">seed</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; returns stream built sequantialy</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">seq-stream-builder</span> <span class="nv">seed</span> <span class="nv">current-element</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">stream-builder</span> <span class="nv">seed</span> <span class="nv">current-element</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="nv">x</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And usage:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">nats</span> <span class="p">(</span><span class="nf">seq-stream-builder</span> <span class="mi">1</span> <span class="nv">identity</span><span class="p">))</span> <span class="c1">; define stream of natural numbers</span>
</span><span class='line'><span class="p">(</span><span class="nf">nats</span><span class="p">)</span> <span class="c1">; returns &#39;(1 . #&lt;procedure&gt;)</span>
</span><span class='line'><span class="p">((</span><span class="nb">cdr </span><span class="p">(</span><span class="nf">nats</span><span class="p">)))</span> <span class="c1">; returns &#39;(2 . #&lt;procedure&gt;)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Root Application Context in Play 2.1]]></title>
    <link href="http://daodecode.com/blog/2013/02/23/root-application-context-in-play-2-dot-1/"/>
    <updated>2013-02-23T17:34:00-05:00</updated>
    <id>http://daodecode.com/blog/2013/02/23/root-application-context-in-play-2-dot-1</id>
    <content type="html"><![CDATA[<p>So <a href="http://www.playframework.com/">Play 2.1</a> is officialy out and one of the new features it brings is the ability
to configure root application context. It have been in <a href="https://github.com/playframework/Play20/commit/da6bbc4">2.1 branch</a>
 for a long-long time and I don&#8217;t see this mentioned in
<a href="http://www.playframework.com/documentation/2.1.0/Highlights">highlights section</a>, but nevertheless it&#8217;s there and it works.
To assign a root context to your play app just open your <code>application.conf</code> file and add the following line</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>application.context=/my_root_context</span></code></pre></td></tr></table></div></figure>


<p>Make sure you have it starting with slash (<code>/</code>)
otherwise play will throw a configuration error at you saying &#8220;Invalid application context&#8221;.</p>
]]></content>
  </entry>
  
</feed>
